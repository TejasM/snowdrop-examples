<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-guide-Test_Chapter">
  <title>Introduction</title>

  <para>The Sports Club application provides a real world-inspired example of
  integrating Spring with the JBoss Entprise Platforms. It consists of three
  web applications, which illustrate several use cases through various
  combinations of components and technologies. It also illustrates how to use
  the Snowdrop libraries to provide JBoss-specific features, such as creating
  a standalone deployment of an <classname>ApplicationContext</classname> and
  injecting beans from that application context into non-Spring components
  like Enterprise Java Beans (EJB).</para>

  <para>This book aims to illustrate the mechanics of using Spring with
  different Java EE 5 components in the specific context of the JBoss
  Enterprise Platforms, and to recommend methods of achieving certain
  integration goals.</para>

  <para>The Sports Club example is not intended as a guide to creating a
  domain model. Detailing the various layers of application and UI design is
  outside the scope of this document. As such, the example application has
  been designed to illustrate integration use cases, rather than to
  demonstrate a domain model that strictly follows principles of
  object-oriented and domain-driven design.</para>

  <!--<para>The example is not intended to be a guide on creating a domain model,
  breaking down the various layers of the application or on UI design. While
  the domain model has attempted to follow the general priciples of
  object-oriented and domain-driven design, which are commonly associated with
  Spring application, there are many other options and ways of doing it, which
  are discussed in far more detail elsewhere. For example, the application
  uses DAOs (or Repositories in DDD terms), but this shouldn't be viewed as
  advocacy for using them in absolute terms. A significant number of Spring
  applications use this particular design, and we have employed it to
  illustrate the technical integration use cases.</para>-->

  <para>The Sports Club example uses RichFaces as a component library for
  JavaServer Faces (JSF). Consult the RichFaces documentation for
  RichFaces-specific information.</para>

  <section>
    <title>Prerequisites: making sure you have all you need</title>

    <para>Running the example requires the following setup:</para>

    <itemizedlist>
      <listitem>
        <para>Java 6 JDK;</para>
      </listitem>

      <listitem>
        <para>JBoss AS 5.1.0 GA or later;</para>
      </listitem>

      <listitem>
        <para>Maven 2.0.9 or later, with properly set up repositories;</para>
      </listitem>

      <listitem>
        <para>The Spring Deployer.</para>
      </listitem>
    </itemizedlist>

    <simplesect>
      <title>Setting up Maven repositories</title>

      <para>The Maven project setup does not make any assumptions where the
      artifacts used in the project are coming from (which repository), as
      users may have different settings for their Maven repositories (direct
      access to community repositories, proxies, enterprise repository with
      approved artifacts). Therefore, the setup of the repositories is left to
      the user of the application.</para>

      <para>In the most simple case, this example can be built out of the box
      if the settings.xml file for the local Maven installation enables the
      repositories from Maven Central and JBoss Releases. Instructions for
      setting up the latter can be found at:
      http://community.jboss.org/wiki/MavenGettingStarted-Users.</para>

      <para>The pom.xml can be modified to include references to other
      repositories, or equivalent artifact versions (if the build environment
      uses an enterprise-wide repository in which the artifacts have different
      version numbers).</para>
    </simplesect>

    <simplesect>
      <title>Installing the Spring Deployer in JBoss AS</title>

      <para>For running the application, the Spring Deployer must be installed
      in JBoss AS. Please refer to the Snowdrop documentation for
      details.</para>
    </simplesect>
  </section>

  <section>
    <title>How to build and run the examples</title>

    <para>The documentation will provide a more detailed account of the
    application structure and use cases covered, but sometimes it is easier to
    just run the application.</para>

    <para>Running the application consists of the following
    steps:<itemizedlist>
        <listitem>
          <para>Building the application</para>
        </listitem>

        <listitem>
          <para>Initializing the database</para>
        </listitem>

        <listitem>
          <para>Preparing JBoss</para>
        </listitem>

        <listitem>
          <para>Deploying the application</para>
        </listitem>

        <listitem>
          <para>Starting the database</para>
        </listitem>

        <listitem>
          <para>Starting the application server</para>
        </listitem>
      </itemizedlist></para>

    <para>Below are some details on how to perform some of these steps.</para>

    <simplesect>
      <title>Building the application</title>

      <para>In this step we are building the application. The Sportsclub
      example uses maven, so it can be built by simply running:</para>

      <informalexample>
        <para><programlisting>mvn clean package</programlisting>This will
        produce two EAR files, both named sportsclub.ear, located under
        sportsclub-ear/target and sportsclub-jpa-ear/target. They have the
        same functionality, but the underlying implementation of the
        persistence layer is different (one is using Hibernate, and another
        one uses JPA).</para>

        <para>The application has three distinct profiles:</para>

        <para><itemizedlist>
            <listitem>
              <para>spring-2.5 - which builds a Spring 2.5 variant of the
              application</para>
            </listitem>

            <listitem>
              <para>spring-3 - which builds a Spring 3.0 variant of the
              application</para>
            </listitem>

            <listitem>
              <para>messaging - which builds a JMS-enabled variant of the
              application</para>
            </listitem>
          </itemizedlist></para>
      </informalexample>

      <para>The first two profiles, <emphasis>spring-2.5</emphasis> and
      <emphasis>spring-3</emphasis> will select either one of Spring 2.5 and
      Spring 3 for building the application. This decision has implications on
      the versions of other modules used in the application, as
      follows:</para>

      <itemizedlist>
        <listitem>
           Spring 2.5 applications will use Spring Webflow 2.0.x and Spring Security 2.0.x;
        </listitem>

        <listitem>
           Spring 3 applications will use Spring Webflow 2.2.x and Spring Security 3.0.x.
        </listitem>
      </itemizedlist>

      <para>The <emphasis>messaging</emphasis> profile will be used for
      enabling and disabling JMS integration, which allows the application to
      run in JBoss AS profiles that do not provide JMS support such as the Web
      profile.</para>

      <para>The application can be built using the following pattern:</para>

      <para>Depending upon the set of profiles provided at build time the
      outcome is as follows:</para>

      <table>
        <title>Profiles and resulting application setup</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry align="center">Profiles</entry>

              <entry align="center">Spring Version</entry>

              <entry align="center">JMS integration</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>no -P option (default)</entry>

              <entry>2.5</entry>

              <entry>Yes</entry>
            </row>

            <row>
              <entry>-Pspring-2.5</entry>

              <entry>2.5</entry>

              <entry>No</entry>
            </row>

            <row>
              <entry>-Pspring-2.5,messaging</entry>

              <entry>2.5</entry>

              <entry>Yes</entry>
            </row>

            <row>
              <entry>-Pspring-3</entry>

              <entry>3</entry>

              <entry>No</entry>
            </row>

            <row>
              <entry>-Pspring-3,messaging</entry>

              <entry>3</entry>

              <entry>Yes</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </simplesect>

    <simplesect>
      <title>Initializing the database</title>

      <para>The application uses a standalone HSQLDB database, which needs to
      be initialized and started before the application is deployed. In what
      follows, we will show you how to initialize (or reset) the database, and
      we will show how to start when we discuss deployment.</para>

      <para>The database is initialised by using maven:</para>

      <informalexample>
        <programlisting>cd database
mvn -Pdb-setup</programlisting>
      </informalexample>

      <para>Once this step has been completed, it does not need to be repeated
      again before running the application, but it can be repeated if the
      database needs to be reset.</para>
    </simplesect>

    <simplesect>
      <title>Preparing JBoss</title>

      <para>Besides building the application and initializing the database,
      you need to set up JBoss for running your application. This step
      involves:</para>

      <itemizedlist>
        <listitem>
          <para>setting up the Spring Deployer</para>
        </listitem>

        <listitem>
          <para>creating a managed DataSource for accessing the
          database</para>
        </listitem>

        <listitem>
          <para>creating a Destination for JMS-related features</para>
        </listitem>
      </itemizedlist>

      <para>As explained in the prerequisites, the Spring Deployer will be
      setup by extracting it into the
      &lt;JBoss-Home&gt;/servers/&lt;server-instance&gt;/deployers folder.
      Please refer to the Spring Deployer documentation for details.</para>

      <para>For creating the DataSource and the Destination, you need to use
      the facilities provided in the jbossconf folder.</para>

      <para><informalexample>
          <programlisting>cd jbossconf
</programlisting>
        </informalexample><informalexample>
          <para>Modify the jbossconf/jbossas.properties file to indicate the
          correct location of the JBoss AS installation. A commented example
          is provided.</para>

          <programlisting>mvn -Pinstall</programlisting>
        </informalexample>This will copy the datasource and JMS destination
      definitions into the JBoss server. Like the previous one, this step
      needs to be executed only once.</para>
    </simplesect>

    <simplesect>
      <title>Deploying the application</title>

      <para>Copy one of the two ears produced by the build to the deploy
      folder of JBoss AS.ou</para>

      <para>The deployment folder is: JBOSS_HOME/server/default/deploy, and
      the two (alternative) build files are:</para>

      <itemizedlist>
        <listitem>
          <para>sportsclub-ear/target/sportsclub.ear (Hibernate-based
          implementation);</para>
        </listitem>

        <listitem>
          <para>sportsclub-jpa-ear/target/sportsclub.ear (JPA-based
          implementation, using Hibernate as the underlying provider).</para>
        </listitem>
      </itemizedlist>
    </simplesect>

    <simplesect>
      <title>Starting the database</title>

      <para>From the database folder:</para>

      <para><informalexample>
          <programlisting>cd database
</programlisting>
        </informalexample>Execute one of the two startup scripts:</para>

      <itemizedlist>
        <listitem>
          <para>On Linux and other *nix-like systems:</para>

          <informalexample>
            <programlisting>./startdb.sh</programlisting>
          </informalexample>
        </listitem>

        <listitem>
          <para>On Windows:</para>

          <informalexample>
            <programlisting>startdb.bat</programlisting>
          </informalexample>
        </listitem>
      </itemizedlist>

      <para>The database must be always started before the application server
      is started and the application is deployed. The application can also be
      deployed in a running application server (for example after making
      changes to it), but this should always happen while the database is
      started).</para>
    </simplesect>
  </section>

  <section>
    <title>Sportsclub and JBoss Developer Studio</title>

    <para>The easiest way to understand how the application works is by
    looking at its sources. This guide will show you how you can import the
    application in JBoss Developer Studio.</para>

    <para>Sportsclub is Maven-based, therefore you will need to create the
    Eclipse project structure for it. You can do by using the Maven Eclipse
    plugin:</para>

    <informalexample>
      <programlisting>mvn eclipse:eclipse -Dwtpversion=2.0</programlisting>

      <para>Alternately, you can install the m2eclipse Maven Eclipse plugin,
      and use it to import the application.</para>
    </informalexample>

    <simplesect>
      <title>Importing the project in JBDS</title>

      <para>Sportsclub is a Maven-based project, so you can import it into
      JBDS if you have the m2eclipse Maven integration plugin installed,
      including the m2eclipse WTP extension. Installation can be found at
      <uri>http://m2eclipse.sonatype.org/installing-m2eclipse.html</uri>.</para>

      <para>For importing the project, go to
      'Import...'-&gt;'Maven'-&gt;'Existing Maven Projects' and select the top
      directory of the Sportsclub example (sportsclub). You will be shown the
      top-level pom as well as the module subpoms.</para>

      <para>At this point, it is important to choose which profiles do you
      want to use in your application (spring-3, spring-2.5, messaging). You
      will need to do so before you complete the import process, otherwise
      your selection will contain the default set of profiles (spring-2.5,
      messaging). You can change the profiles later from the contextual menu
      of the project (Right click-Maven followed by a dependency update), but
      you will need to do so for every project in your workspace.</para>

      <para>Because there are slight differences between the context
      definitions that apply in various configurations (spring-3, spring-2.5)
      and also because some definitions may or may not be included (as there
      is the case with the messaging profile), the poms of several modules
      include alternative locations for web resources, that are added by Maven
      at build time. Unfortunately, the m2eclipse plugin does not include
      these locations and they have to be added manually to the
      project.</para>

      <para>You can add web resources to a project by opening its properties
      and selecting the "Deployment Assembly" option, followed pressing the
      "Add..." button and selecting the "Folder" option. The contents of the
      selected folder will be added automatically in the document root of the
      application.</para>

      <para>Depending on the selected profiles you need to add additional
      directories as shown in the following table:</para>

      <table>
        <title>Additional resource folders per module and profile</title>

        <tgroup cols="3">
          <thead>
            <row>
              <entry>Module</entry>

              <entry>Enabled profile</entry>

              <entry>Additional folder</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry>sportsclub-invoicing-mvc</entry>

              <entrytbl cols="1">
                <tbody>
                  <row>
                    <entry>spring-2.5</entry>
                  </row>

                  <row>
                    <entry>spring-3</entry>
                  </row>

                  <row>
                    <entry>messaging</entry>
                  </row>
                </tbody>
              </entrytbl>

              <entrytbl cols="1">
                <tbody>
                  <row>
                    <entry>src/main/webapp-security-2</entry>
                  </row>

                  <row>
                    <entry>src/main/webapp-security-3</entry>
                  </row>

                  <row>
                    <entry>src/main/webapp-messaging</entry>
                  </row>
                </tbody>
              </entrytbl>
            </row>

            <row>
              <entry>sportsclub-reservation-webflow</entry>

              <entrytbl cols="1">
                <tbody>
                  <row>
                    <entry>spring-2.5</entry>
                  </row>

                  <row>
                    <entry>spring-3</entry>
                  </row>
                </tbody>
              </entrytbl>

              <entrytbl cols="1">
                <tbody>
                  <row>
                    <entry>src/main/webapp-webflow-2.0</entry>
                  </row>

                  <row>
                    <entry>src/main/webapp-webflow-2.0</entry>
                  </row>
                </tbody>
              </entrytbl>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Please note that you need to add additional resources even if you
      don't indicate any additional profiles explicitly, since the application
      will enable the spring-2.5 and messaging profiles by default.</para>

      <para>Now you can run the application. On the 'Servers' view choose a
      JBoss EAP 5 server, add one of the two EAR projects: sportsclub-ear or
      sportsclub-jpa-ear and start the project.</para>
    </simplesect>
  </section>
</chapter>
